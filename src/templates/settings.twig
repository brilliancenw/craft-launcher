{% import "_includes/forms" as forms %}

{% set isProjectConfigReadOnly = craft.app.projectConfig.readOnly %}

{# First Run Welcome Screen #}
{% if not firstRunCompleted %}
<div id="launcher-welcome-overlay" class="launcher-welcome-overlay">
    <div class="launcher-welcome-content">
        <div class="launcher-welcome-header">
            <h1>Welcome to Launcher!</h1>
        </div>

        <div class="launcher-welcome-message">
            <p class="launcher-welcome-intro">The team at <strong>Brilliance</strong> is thrilled to bring you this powerful search experience!</p>

            <div class="launcher-welcome-features">
                <div class="launcher-welcome-feature">
                    <span class="launcher-welcome-icon">🚀</span>
                    <h3>Lightning-Fast Search</h3>
                    <p>Access everything in Craft with a single keystroke</p>
                </div>
                <div class="launcher-welcome-feature">
                    <span class="launcher-welcome-icon">⚡</span>
                    <h3>Smart & Intuitive</h3>
                    <p>Learns from your usage to show what you need most</p>
                </div>
                <div class="launcher-welcome-feature">
                    <span class="launcher-welcome-icon">💫</span>
                    <h3>Fully Customizable</h3>
                    <p>Configure shortcuts, search types, and more</p>
                </div>
            </div>

            <p class="launcher-welcome-footer">
                We're constantly improving Launcher. Have ideas? Found a bug? We'd love to hear from you!
                <br>
                <a href="https://github.com/brilliancenw/craft-launcher" target="_blank" class="launcher-welcome-link">Share your feedback on GitHub</a>
            </p>
        </div>

        <button type="button" id="launcher-welcome-dismiss" class="btn submit large">Let's Get Started!</button>
    </div>

    <canvas id="launcher-confetti-canvas"></canvas>
</div>

<style>
.launcher-welcome-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(102, 126, 234, 0.15);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: launcher-fadeIn 0.5s ease-in-out;
}

.launcher-welcome-content {
    background: white;
    border-radius: 16px;
    padding: 60px;
    max-width: 800px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
    text-align: center;
    position: relative;
    z-index: 10001;
    animation: launcher-slideUp 0.6s cubic-bezier(0.16, 1, 0.3, 1);
}

.launcher-welcome-header h1 {
    font-size: 48px;
    font-weight: 700;
    color: #667eea;
    margin: 0 0 30px 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.launcher-welcome-intro {
    font-size: 20px;
    color: #4a5568;
    margin-bottom: 40px;
    line-height: 1.6;
}

.launcher-welcome-features {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 30px;
    margin: 40px 0;
}

.launcher-welcome-feature {
    text-align: center;
}

.launcher-welcome-icon {
    font-size: 48px;
    display: block;
    margin-bottom: 15px;
    animation: launcher-bounce 2s infinite;
}

.launcher-welcome-feature:nth-child(2) .launcher-welcome-icon {
    animation-delay: 0.2s;
}

.launcher-welcome-feature:nth-child(3) .launcher-welcome-icon {
    animation-delay: 0.4s;
}

.launcher-welcome-feature h3 {
    font-size: 18px;
    font-weight: 600;
    color: #2d3748;
    margin: 0 0 10px 0;
}

.launcher-welcome-feature p {
    font-size: 14px;
    color: #718096;
    margin: 0;
    line-height: 1.5;
}

.launcher-welcome-footer {
    font-size: 16px;
    color: #4a5568;
    margin-top: 40px;
    line-height: 1.6;
}

.launcher-welcome-link {
    color: #667eea;
    font-weight: 600;
    text-decoration: none;
    border-bottom: 2px solid #667eea;
    transition: all 0.2s;
}

.launcher-welcome-link:hover {
    color: #764ba2;
    border-bottom-color: #764ba2;
}

button[id*="launcher-welcome-dismiss"] {
    margin-top: 40px;
    padding: 16px 48px;
    font-size: 18px;
    font-weight: 600;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
}

button[id*="launcher-welcome-dismiss"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);
}

canvas[id*="launcher-confetti-canvas"] {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10002;
}

@keyframes launcher-fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes launcher-slideUp {
    from {
        opacity: 0;
        transform: translateY(40px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes launcher-bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
}

.launcher-welcome-overlay.launcher-dismissing {
    animation: launcher-fadeOut 0.5s ease-in-out forwards;
}

.launcher-welcome-overlay.launcher-dismissing .launcher-welcome-content {
    animation: launcher-slideDown 0.5s ease-in-out forwards;
}

@keyframes launcher-fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

@keyframes launcher-slideDown {
    from {
        opacity: 1;
        transform: translateY(0);
    }
    to {
        opacity: 0;
        transform: translateY(40px);
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Find welcome screen elements (Craft auto-prefixes IDs)
    const allLauncherDivs = document.querySelectorAll('div[id*="launcher-welcome-overlay"]');
    const overlay = allLauncherDivs.length > 0 ? allLauncherDivs[0] : null;

    const allDismissBtns = document.querySelectorAll('button[id*="launcher-welcome-dismiss"]');
    const dismissBtn = allDismissBtns.length > 0 ? allDismissBtns[0] : null;

    const allCanvases = document.querySelectorAll('canvas[id*="launcher-confetti-canvas"]');
    const canvas = allCanvases.length > 0 ? allCanvases[0] : null;

    if (!overlay || !dismissBtn || !canvas) {
        return;
    }

    // Confetti animation
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const confettiPieces = [];
    const confettiCount = 150;
    const colors = ['#667eea', '#764ba2', '#f093fb', '#4facfe', '#43e97b', '#fa709a'];
    let animationActive = true;
    let startTime = Date.now();
    const duration = 5000; // 5 seconds

    class ConfettiPiece {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height - canvas.height;
            this.size = Math.random() * 8 + 4;
            this.speedY = Math.random() * 3 + 2;
            this.speedX = Math.random() * 2 - 1;
            this.color = colors[Math.floor(Math.random() * colors.length)];
            this.rotation = Math.random() * 360;
            this.rotationSpeed = Math.random() * 10 - 5;
            this.opacity = 1;
        }

        update(elapsed) {
            this.y += this.speedY;
            this.x += this.speedX;
            this.rotation += this.rotationSpeed;

            // Fade out in the last second
            if (elapsed > duration - 1000) {
                this.opacity = (duration - elapsed) / 1000;
            }

            // Don't recycle - let them fall off screen
            if (this.y > canvas.height) {
                this.opacity = 0;
            }
        }

        draw() {
            if (this.opacity <= 0) return;

            ctx.save();
            ctx.globalAlpha = this.opacity;
            ctx.translate(this.x, this.y);
            ctx.rotate(this.rotation * Math.PI / 180);
            ctx.fillStyle = this.color;
            ctx.fillRect(-this.size / 2, -this.size / 2, this.size, this.size);
            ctx.restore();
        }
    }

    // Create confetti pieces
    for (let i = 0; i < confettiCount; i++) {
        confettiPieces.push(new ConfettiPiece());
    }

    // Animation loop
    function animate() {
        const elapsed = Date.now() - startTime;

        if (elapsed >= duration) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            animationActive = false;
            return; // Stop animation
        }

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        confettiPieces.forEach(piece => {
            piece.update(elapsed);
            piece.draw();
        });

        requestAnimationFrame(animate);
    }
    animate();

    // Handle window resize
    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    // Dismiss button handler
    dismissBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();

        // Save the setting via AJAX
        try {
            await fetch('{{ actionUrl('launcher/settings/complete-first-run') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                    'Accept': 'application/json'
                }
            });
        } catch (error) {
            console.error('Failed to save first run setting:', error);
        }

        overlay.classList.add('launcher-dismissing');
        setTimeout(() => {
            overlay.remove();
        }, 500);
    });
});
</script>
{% endif %}

{% if isProjectConfigReadOnly %}
    <div class="readable">
        <blockquote class="note">
            <p><strong>Settings are read-only.</strong></p>
            <p>The system is currently configured to disallow administrative changes. To adjust plugin settings, update your project config files in your development environment and deploy the changes.</p>
        </blockquote>
    </div>
{% endif %}

<h1>General Settings</h1>
<p>Configure how the launcher behaves and responds to user input.</p>

<table class="data fullwidth fixed-layout" dir="ltr">
    <tbody>
        <tr>
            <th class="light" style="width: 30%;">
                <label for="hotkey">Keyboard Shortcut</label>
                <div class="instructions">
                    <small>The keyboard shortcut to open the launcher (e.g., cmd+k, ctrl+shift+p)</small>
                </div>
            </th>
            <td>
                {{ forms.textField({
                    id: 'hotkey',
                    name: 'hotkey',
                    value: settings.hotkey,
                    required: true,
                    placeholder: 'cmd+k',
                    errors: settings.getErrors('hotkey'),
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
        </tr>
        <tr>
            <th class="light">
                <label for="debounceDelay">Search Delay</label>
                <div class="instructions">
                    <small>Milliseconds to wait after typing before searching</small>
                </div>
            </th>
            <td>
                {{ forms.textField({
                    id: 'debounceDelay',
                    name: 'debounceDelay',
                    value: settings.debounceDelay,
                    type: 'number',
                    min: 100,
                    max: 1000,
                    placeholder: '300',
                    errors: settings.getErrors('debounceDelay'),
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
        </tr>
        <tr>
            <th class="light">
                <label for="maxResults">Maximum Results</label>
                <div class="instructions">
                    <small>Maximum number of results to show for each content type</small>
                </div>
            </th>
            <td>
                {{ forms.textField({
                    id: 'maxResults',
                    name: 'maxResults',
                    value: settings.maxResults,
                    type: 'number',
                    min: 1,
                    max: 50,
                    placeholder: '5',
                    errors: settings.getErrors('maxResults'),
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
        </tr>
    </tbody>
</table>

<hr>

<h1>Searchable Content Types</h1>
<p>Choose which types of content should be included in search results.</p>

<table class="data fullwidth fixed-layout" dir="ltr">
    <tbody>
        <tr>
            <th style="width: 25%;">Content Type</th>
            <th style="width: 25%;">Include in Search</th>
            <th>Description</th>
        </tr>
        <tr>
            <th class="light">Asset Volumes</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-assetVolumes',
                    name: 'searchableTypes[assetVolumes]',
                    on: settings.searchableTypes.assetVolumes ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to asset volume settings</td>
        </tr>
        <tr>
            <th class="light">Assets</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-assets',
                    name: 'searchableTypes[assets]',
                    on: settings.searchableTypes.assets ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search files and media assets</td>
        </tr>
        <tr>
            <th class="light">Categories</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-categories',
                    name: 'searchableTypes[categories]',
                    on: settings.searchableTypes.categories ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search categories from all category groups</td>
        </tr>
        <tr>
            <th class="light">Category Groups</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-categoryGroups',
                    name: 'searchableTypes[categoryGroups]',
                    on: settings.searchableTypes.categoryGroups ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to category group settings</td>
        </tr>
        <tr>
            <th class="light">Entries</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-entries',
                    name: 'searchableTypes[entries]',
                    on: settings.searchableTypes.entries ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search all entry content across sections</td>
        </tr>
        <tr>
            <th class="light">Field Groups</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-fieldGroups',
                    name: 'searchableTypes[fieldGroups]',
                    on: settings.searchableTypes.fieldGroups ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to field group settings</td>
        </tr>
        <tr>
            <th class="light">Fields</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-fields',
                    name: 'searchableTypes[fields]',
                    on: settings.searchableTypes.fields ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to field definitions</td>
        </tr>
        <tr>
            <th class="light">Global Sets</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-globals',
                    name: 'searchableTypes[globals]',
                    on: settings.searchableTypes.globals ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search global content sets</td>
        </tr>
        <tr>
            <th class="light">Plugins</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-plugins',
                    name: 'searchableTypes[plugins]',
                    on: settings.searchableTypes.plugins ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to plugin settings</td>
        </tr>
        <tr>
            <th class="light">Routes</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-routes',
                    name: 'searchableTypes[routes]',
                    on: settings.searchableTypes.routes ?? false,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to route settings</td>
        </tr>
        <tr>
            <th class="light">Sections</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-sections',
                    name: 'searchableTypes[sections]',
                    on: settings.searchableTypes.sections ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to section settings</td>
        </tr>
        <tr>
            <th class="light">Settings</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-settings',
                    name: 'searchableTypes[settings]',
                    on: settings.searchableTypes.settings ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search and access system settings pages</td>
        </tr>
        <tr>
            <th class="light">User Groups</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-userGroups',
                    name: 'searchableTypes[userGroups]',
                    on: settings.searchableTypes.userGroups ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Navigate to user group settings</td>
        </tr>
        <tr>
            <th class="light">Users</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-users',
                    name: 'searchableTypes[users]',
                    on: settings.searchableTypes.users ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search user accounts</td>
        </tr>
        <tr>
            <th class="light">Utilities</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchableTypes-utilities',
                    name: 'searchableTypes[utilities]',
                    on: settings.searchableTypes.utilities ?? true,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Search and browse system utilities (Clear Caches, Migrations, etc.)</td>
        </tr>
    </tbody>
</table>

<div id="searchable-types-warning" style="display: none; margin-top: 14px; padding: 14px; background: #fef3cd; border: 1px solid #f0ad4e; border-radius: 4px; color: #8a6d3b;">
    <strong>Warning:</strong> All content types are disabled. The launcher will have no searchable content.
</div>

<hr>

<h1>Search Options</h1>
<p>Configure how the search behaves and what content to include.</p>

<table class="data fullwidth fixed-layout" dir="ltr">
    <tbody>
        <tr>
            <th style="width: 25%;">Option</th>
            <th style="width: 25%;">Enable</th>
            <th>Description</th>
        </tr>
        <tr>
            <th class="light">Include Drafts</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchDrafts',
                    name: 'searchDrafts',
                    on: settings.searchDrafts,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Include draft entries in search results</td>
        </tr>
        <tr>
            <th class="light">Include Revisions</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchRevisions',
                    name: 'searchRevisions',
                    on: settings.searchRevisions,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Include entry revisions in search results</td>
        </tr>
        <tr>
            <th class="light">Include Disabled</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchDisabled',
                    name: 'searchDisabled',
                    on: settings.searchDisabled,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">Include disabled elements in search results</td>
        </tr>
        <tr>
            <th class="light">Search Entries by Author</th>
            <td>
                {{ forms.lightswitchField({
                    id: 'searchEntriesByAuthor',
                    name: 'searchEntriesByAuthor',
                    on: settings.searchEntriesByAuthor,
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
            <td class="light">When searching for usernames, also show entries authored by those users</td>
        </tr>
    </tbody>
</table>

{% set isCommerceInstalled = craft.app.plugins.isPluginInstalled('commerce') %}
{% if isCommerceInstalled %}
    <hr>
    
    <h1>Commerce Search Options</h1>
    <p>Configure search for Craft Commerce elements (requires Commerce plugin).</p>
    
    <table class="data fullwidth fixed-layout" dir="ltr">
        <tbody>
            <tr>
                <th style="width: 25%;">Option</th>
                <th style="width: 25%;">Enable</th>
                <th>Description</th>
            </tr>
            <tr>
                <th class="light">Search Customers</th>
                <td>
                    {{ forms.lightswitchField({
                        id: 'searchCommerceCustomers',
                        name: 'searchCommerceCustomers',
                        on: settings.searchCommerceCustomers,
                        disabled: isProjectConfigReadOnly,
                    }) }}
                </td>
                <td class="light">Search Commerce customers by name and email</td>
            </tr>
            <tr>
                <th class="light">Search Products</th>
                <td>
                    {{ forms.lightswitchField({
                        id: 'searchCommerceProducts',
                        name: 'searchCommerceProducts',
                        on: settings.searchCommerceProducts,
                        disabled: isProjectConfigReadOnly,
                    }) }}
                </td>
                <td class="light">Search Commerce products and variants by name</td>
            </tr>
            <tr>
                <th class="light">Search Orders</th>
                <td>
                    {{ forms.lightswitchField({
                        id: 'searchCommerceOrders',
                        name: 'searchCommerceOrders',
                        on: settings.searchCommerceOrders,
                        disabled: isProjectConfigReadOnly,
                    }) }}
                </td>
                <td class="light">Search orders by number, customer name, and email</td>
            </tr>
        </tbody>
    </table>
{% endif %}

<hr>

<h1>Result Navigation Shortcuts</h1>
<p>Configure keyboard shortcuts for navigating to search results.</p>

<table class="data fullwidth fixed-layout" dir="ltr">
    <tbody>
        <tr>
            <th class="light" style="width: 30%;">
                <label for="selectResultModifier">Modifier Key</label>
                <div class="instructions">
                    <small>Modifier key used for result selection (cmd, ctrl, alt, shift)</small>
                </div>
            </th>
            <td>
                {{ forms.selectField({
                    id: 'selectResultModifier',
                    name: 'selectResultModifier',
                    value: settings.selectResultModifier,
                    options: [
                        {label: 'Command (⌘)', value: 'cmd'},
                        {label: 'Control (Ctrl)', value: 'ctrl'},
                        {label: 'Alt/Option (⌥)', value: 'alt'},
                        {label: 'Shift (⇧)', value: 'shift'},
                    ],
                    errors: settings.getErrors('selectResultModifier'),
                    disabled: isProjectConfigReadOnly,
                }) }}
            </td>
        </tr>
    </tbody>
</table>

<div class="field">
    <div class="heading">
        <label>Navigation Shortcuts</label>
        <div class="instructions">
            <p>Configure how to activate search results. The first result uses Return key, results 2-10 use the modifier key + number.</p>
            <p><strong>Example:</strong> With "Command" modifier, press Cmd+1 for the first numbered result, Cmd+2 for second, etc.</p>
        </div>
    </div>
    <div class="input">
        <table class="data">
            <thead>
                <tr>
                    <th>Result Position</th>
                    <th>Keyboard Shortcut</th>
                    <th>Icon Display</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>First Result</strong></td>
                    <td><kbd>Return</kbd> / <kbd>Enter</kbd></td>
                    <td>⏎</td>
                </tr>
                <tr>
                    <td>Second Result (#1)</td>
                    <td><kbd>{{ settings.selectResultModifier|capitalize }}+1</kbd></td>
                    <td>{{ settings.selectResultModifier == 'cmd' ? '⌘' : (settings.selectResultModifier|upper) }}+1</td>
                </tr>
                <tr>
                    <td>Third Result (#2)</td>
                    <td><kbd>{{ settings.selectResultModifier|capitalize }}+2</kbd></td>
                    <td>{{ settings.selectResultModifier == 'cmd' ? '⌘' : (settings.selectResultModifier|upper) }}+2</td>
                </tr>
                <tr>
                    <td>Fourth Result (#3)</td>
                    <td><kbd>{{ settings.selectResultModifier|capitalize }}+3</kbd></td>
                    <td>{{ settings.selectResultModifier == 'cmd' ? '⌘' : (settings.selectResultModifier|upper) }}+3</td>
                </tr>
                <tr style="opacity: 0.6;">
                    <td colspan="3"><em>... and so on through {{ settings.selectResultModifier|capitalize }}+9 (up to 10 total results)</em></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<hr>

<h1>Content Filters</h1>
<p>Optionally limit search to specific sections, categories, or volumes.</p>

{% set allSections = craft.app.entries.getAllSections() %}
{% if allSections|length %}
    {{ forms.checkboxSelectField({
        label: 'Sections to Search',
        instructions: 'Leave blank to search all sections',
        id: 'searchableSections',
        name: 'searchableSections',
        options: allSections|map(s => {label: s.name, value: s.id}),
        values: settings.searchableSections,
        disabled: isProjectConfigReadOnly,
    }) }}
{% endif %}

{% set allCategoryGroups = craft.app.categories.getAllGroups() %}
{% if allCategoryGroups|length %}
    {{ forms.checkboxSelectField({
        label: 'Category Groups to Search',
        instructions: 'Leave blank to search all category groups',
        id: 'searchableCategoryGroups',
        name: 'searchableCategoryGroups',
        options: allCategoryGroups|map(g => {label: g.name, value: g.id}),
        values: settings.searchableCategoryGroups,
        disabled: isProjectConfigReadOnly,
    }) }}
{% endif %}

{% set allAssetVolumes = craft.app.volumes.getAllVolumes() %}
{% if allAssetVolumes|length %}
    {{ forms.checkboxSelectField({
        label: 'Asset Volumes to Search',
        instructions: 'Leave blank to search all volumes',
        id: 'searchableAssetVolumes',
        name: 'searchableAssetVolumes',
        options: allAssetVolumes|map(v => {label: v.name, value: v.id}),
        values: settings.searchableAssetVolumes,
        disabled: isProjectConfigReadOnly,
    }) }}
{% endif %}

<hr>

<h1>System Diagnostics</h1>
<p>Information about the launcher's database setup and functionality.</p>

{% set tableStatus = craft.launcher.history.getTableStatus() %}

<div class="field">
    <div class="heading">
        <label>Database Status</label>
        <div class="instructions">
            <p>The launcher uses a database table to track your launch history and provide intelligent suggestions.</p>
        </div>
    </div>
    <div class="input">
        <table class="data">
            <tbody>
                <tr>
                    <th class="light" style="width: 30%;">User History Table</th>
                    <td>
                        {% if tableStatus.exists %}
                            <span class="status green" data-icon="check"></span> {{ tableStatus.message }}
                        {% else %}
                            <span class="status red" data-icon="alert"></span> {{ tableStatus.message }}

                            <div style="margin-top: 10px; padding: 15px; background: #fef2f2; border: 1px solid #fecaca; border-radius: 4px;">
                                <h4 style="margin-top: 0; color: #dc2626;">Action Required</h4>
                                <p><strong>The user history table is missing.</strong> This means launch history and popular items won't work properly.</p>

                                <p><strong>To fix this issue:</strong></p>
                                <div style="margin: 15px 0;">
                                    <a href="{{ url('utilities/launcher-table-manager') }}" class="btn submit">
                                        Go to Launcher Utility to Create Table
                                    </a>
                                </div>

                                <p style="margin-top: 15px;"><strong>Alternative method:</strong> Reinstall the plugin via console:</p>
                                <code style="display: block; margin: 5px 0; padding: 5px; background: #f9f9f9;">
                                    php craft plugin/uninstall launcher<br>
                                    php craft plugin/install launcher
                                </code>

                                <p style="margin-top: 10px; font-size: 0.9em; color: #666;">
                                    <strong>Note:</strong> The plugin will continue to work for searching, but history features will be disabled until the table is created.
                                </p>
                            </div>
                        {% endif %}
                    </td>
                </tr>
                <tr>
                    <th class="light">Plugin Version</th>
                    <td>{{ craft.app.plugins.getPlugin('launcher').version }}</td>
                </tr>
                <tr>
                    <th class="light">Craft Version</th>
                    <td>{{ craft.app.version }}</td>
                </tr>
                <tr>
                    <th class="light">History Tracking</th>
                    <td>
                        {% if settings.enableLaunchHistory %}
                            <span class="status green" data-icon="check"></span> Enabled
                        {% else %}
                            <span class="status" data-icon="minus"></span> Disabled in settings
                        {% endif %}
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
(function() {
    function checkSearchableTypes() {
        let anyEnabled = false;

        // Find all inputs by name attribute
        const inputs = document.querySelectorAll('input[type="hidden"][name^="settings[searchableTypes]["]');

        inputs.forEach(function(input) {
            if (input.value === '1') {
                anyEnabled = true;
            }
        });

        // Show or hide warning (Craft prepends "settings-" to the ID)
        const warning = document.getElementById('settings-searchable-types-warning');
        if (warning) {
            warning.style.display = anyEnabled ? 'none' : 'block';
        }
    }

    // Check on page load and when Craft is ready
    if (typeof Craft !== 'undefined' && Craft.cp) {
        console.log('[Launcher Settings] Using Craft.cp.ready');
        Craft.cp.ready(function() {
            console.log('[Launcher Settings] Craft.cp ready fired');

            // Wait a bit for Craft's lightswitch components to initialize
            setTimeout(function() {
                console.log('[Launcher Settings] Running initial check');
                checkSearchableTypes();

                // Monitor all searchable type toggles for changes
                const inputs = document.querySelectorAll('input[type="hidden"][name^="settings[searchableTypes]["]');
                console.log('[Launcher Settings] Attaching listeners to', inputs.length, 'inputs');

                // Use MutationObserver to watch for value changes on all inputs
                inputs.forEach(function(input) {
                    // Create observer for this input
                    const observer = new MutationObserver(function(mutations) {
                        mutations.forEach(function(mutation) {
                            if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
                                console.log('[Launcher Settings] Input value changed:', input.name, 'New value:', input.value);
                                setTimeout(checkSearchableTypes, 50);
                            }
                        });
                    });

                    // Start observing the input for attribute changes
                    observer.observe(input, { attributes: true, attributeFilter: ['value'] });

                    // Also listen to the lightswitch button clicks as backup
                    const parent = input.parentElement;
                    if (parent) {
                        const lightswitch = parent.querySelector('.lightswitch');
                        if (lightswitch) {
                            console.log('[Launcher Settings] Found lightswitch for:', input.name);
                            lightswitch.addEventListener('click', function() {
                                console.log('[Launcher Settings] Lightswitch clicked for:', input.name);
                                // Check multiple times as Craft may update the value asynchronously
                                setTimeout(checkSearchableTypes, 50);
                                setTimeout(checkSearchableTypes, 150);
                            });
                        }
                    }
                });
            }, 250);
        });
    } else {
        console.log('[Launcher Settings] Using DOMContentLoaded fallback');
        // Fallback if Craft.cp is not available
        document.addEventListener('DOMContentLoaded', function() {
            console.log('[Launcher Settings] DOMContentLoaded fired');

            // Poll for inputs to appear (try every 200ms for up to 5 seconds)
            let attempts = 0;
            const maxAttempts = 25;

            const pollForInputs = function() {
                attempts++;
                console.log('[Launcher Settings] Polling attempt', attempts);

                const inputs = document.querySelectorAll('input[type="hidden"][name^="settings[searchableTypes]["]');

                if (inputs.length > 0) {
                    console.log('[Launcher Settings] Found', inputs.length, 'inputs after', attempts, 'attempts!');
                    checkSearchableTypes();

                    // Use MutationObserver to watch for value changes on all inputs
                    inputs.forEach(function(input) {
                        // Create observer for this input
                        const observer = new MutationObserver(function(mutations) {
                            mutations.forEach(function(mutation) {
                                if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
                                    console.log('[Launcher Settings] Input value changed:', input.name, 'New value:', input.value);
                                    setTimeout(checkSearchableTypes, 50);
                                }
                            });
                        });

                        // Start observing the input for attribute changes
                        observer.observe(input, { attributes: true, attributeFilter: ['value'] });

                        // Also listen to the lightswitch button clicks as backup
                        const parent = input.parentElement;
                        if (parent) {
                            const lightswitch = parent.querySelector('.lightswitch');
                            if (lightswitch) {
                                console.log('[Launcher Settings] Found lightswitch for:', input.name);
                                lightswitch.addEventListener('click', function() {
                                    console.log('[Launcher Settings] Lightswitch clicked for:', input.name);
                                    // Check multiple times as Craft may update the value asynchronously
                                    setTimeout(checkSearchableTypes, 50);
                                    setTimeout(checkSearchableTypes, 150);
                                });
                            }
                        }
                    });
                } else if (attempts < maxAttempts) {
                    // Keep polling
                    setTimeout(pollForInputs, 200);
                } else {
                    console.error('[Launcher Settings] Gave up after', maxAttempts, 'attempts');
                }
            };

            // Start polling
            setTimeout(pollForInputs, 200);
        });
    }
})();
</script>